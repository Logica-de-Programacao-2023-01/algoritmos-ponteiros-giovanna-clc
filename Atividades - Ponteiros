//Exercício 01//

package main

import "fmt"

// Função para atualizar o valor do inteiro para a soma dos n primeiros números naturais
func AtualizarValor(ponteiro *int, n int) {
	soma := 0
	for i := 1; i <= n; i++ {
		soma += i
	}
	*ponteiro = soma
}

func main() {
	var num int = 0
	n := 5

	fmt.Println("Valor inicial:", num)

	// Chamando a função para atualizar o valor do inteiro
	AtualizarValor(&num, n)

	fmt.Println("Novo valor:", num)
}

//Exercício 02//

package main

import "fmt"

func VerificarParOuImpar(ponteiro *int) {
	if *ponteiro%2 == 0 {
		*ponteiro = 0 // Atualiza para 0 se for par
	} else {
		*ponteiro = 1 // Atualiza para 1 se for ímpar
	}
}

func main() {
	var num int = 7

	fmt.Println("Valor inicial:", num)

	VerificarParOuImpar(&num)

	fmt.Println("Novo valor:", num)
}

//Exercício 03//

package main

import (
	"fmt"
	"strings"
)

func InverterString(ponteiro *string) {
	runes := []rune(*ponteiro)
	for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
		runes[i], runes[j] = runes[j], runes[i]
	}
	*ponteiro = string(runes)
}

func main() {
	texto := "Hello, World!"
	fmt.Println("Texto original:", texto)

	InverterString(&texto)

	fmt.Println("Texto invertido:", texto)
}

//Exercício 04//

package main

import "fmt"

func AtualizarValor(ponteiro *int) {
	valor := *ponteiro

	digito1 := valor % 10
	digito2 := (valor / 10) % 10

	soma := digito1 + digito2

	*ponteiro = soma
}

func main() {
	numero := 1234
	fmt.Println("Valor original:", numero)

	AtualizarValor(&numero)

	fmt.Println("Novo valor:", numero)
}

//Exercício 05//

package main

import (
	"fmt"
	"math"
)

func AtualizarValor(ponteiro *float64) {

	valor := *ponteiro

	media := (valor + math.Pi) / 2

	*ponteiro = media
}

func main() {
	numero := 3.14
	fmt.Println("Valor original:", numero)

	AtualizarValor(&numero)

	fmt.Println("Novo valor:", numero)
}

//Exercício 06//

package main

import (
	"fmt"
)

type Livro struct {
	Titulo string
	Autor  string
}

func AlterarTituloLivro(livro *Livro) {
	if livro.Autor == "Anônimo" {
		livro.Titulo = "Desconhecido"
	}
}

func main() {
	livro1 := Livro{Titulo: "Livro 1", Autor: "Autor 1"}
	livro2 := Livro{Titulo: "Livro 2", Autor: "Anônimo"}

	fmt.Println("Antes:")
	fmt.Println("Livro 1:", livro1.Titulo)
	fmt.Println("Livro 2:", livro2.Titulo)

	AlterarTituloLivro(&livro1)
	AlterarTituloLivro(&livro2)

	fmt.Println("\nDepois:")
	fmt.Println("Livro 1:", livro1.Titulo)
	fmt.Println("Livro 2:", livro2.Titulo)
}

//Exercício 07//

package main

import (
	"fmt"
)

type Conta struct {
	Saldo   float64
	Titular string
}

func AdicionarSaldo(conta *Conta, valor float64) {
	conta.Saldo += valor
}

func main() {
	conta := Conta{Saldo: 1000, Titular: "João"}

	fmt.Println("Saldo antes:", conta.Saldo)

	AdicionarSaldo(&conta, 500)

	fmt.Println("Saldo depois:", conta.Saldo)
}

//Exercício 08//

package main

import "fmt"

func modifyValue(ptr *int) {
    *ptr = 100

    ptr = nil
}

func main() {
    var value int = 10

    ptr := &value

    fmt.Println("Valor antes:", *ptr)

    modifyValue(ptr)

    fmt.Println("Valor depois:", *ptr)
}

//Exercício 09//

package main

import "fmt"

type Livro struct {
	Titulo string
	Autor  string
	Preco  float64
}

func aplicarDesconto(livro *Livro) {
	livro.Preco = livro.Preco * 0.9
}

func main() {
	livro := Livro{
		Titulo: "Aventuras na Floresta",
		Autor:  "João da Silva",
		Preco:  50.0,
	}

	fmt.Println("Preço antes do desconto:", livro.Preco)

	aplicarDesconto(&livro)

	fmt.Println("Preço depois do desconto:", livro.Preco)
}

//Exercíio 10//

package main

import (
	"fmt"
	"math"
)

func isPrime(num int) bool {
	if num < 2 {
		return false
	}
	limit := int(math.Sqrt(float64(num)))
	for i := 2; i <= limit; i++ {
		if num%i == 0 {
			return false
		}
	}
	return true
}

func fillPrimes(slice *[]int, size int) {
	count := 0
	num := 2
	for count < size {
		if isPrime(num) {
			*slice = append(*slice, num)
			count++
		}
		num++
	}
}

func main() {
	var primes []int
	size := 10

	fillPrimes(&primes, size)

	fmt.Println(primes)
}
